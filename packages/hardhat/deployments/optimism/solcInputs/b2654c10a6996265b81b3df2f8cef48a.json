{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/BookManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"./Main.sol\";\r\n\r\ncontract Book is Main {\r\n\tstruct VerseStr {\r\n\t\tuint256 verseId;\r\n\t\tuint256 verseNumber;\r\n\t\tuint256 chapterNumber;\r\n\t\tstring verseContent;\r\n\t}\r\n\r\n\tmapping(uint256 => VerseStr) public verses;\r\n\tmapping(address => uint256[]) public confirmations;\r\n\tuint256 public numberOfVerses = 0;\r\n\r\n\t//TODO: indexed parameters\r\n\tevent Verse(\r\n\t\taddress signer,\r\n\t\tuint256 verseId,\r\n\t\tuint256 verseNumber,\r\n\t\tuint256 chapterNumber,\r\n\t\tstring verseContent\r\n\t);\r\n\r\n\tevent Confirmation(address confirmedBy, bytes verseId);\r\n\r\n\tmodifier hasNotConfirmed(address addr, uint256 verseId) {\r\n\t\tbool canContinue = true;\r\n\t\tfor (uint256 i = 0; i < confirmations[addr].length; i++) {\r\n\t\t\tif (confirmations[addr][i] == verseId) {\r\n\t\t\t\tcanContinue = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\trequire(canContinue, \"This address has already confirmed this verse.\");\r\n\t\t_;\r\n\t}\r\n\r\n\t//would-be constructor\r\n\r\n\tfunction addVerse(\r\n\t\tuint256 _verseNumber,\r\n\t\tuint256 _chapterNumber,\r\n\t\tstring memory _verseContent\r\n\t) external onlyOwner {\r\n\t\t_storeVerse(_verseNumber, _chapterNumber, _verseContent);\r\n\t}\r\n\r\n\tfunction addBatchVerses(\r\n\t\tuint256[] memory _verseNumber,\r\n\t\tuint256[] memory _chapterNumber,\r\n\t\tstring[] memory _verseContent\r\n\t) external onlyOwner {\r\n\t\tuint256 length = _verseNumber.length;\r\n\t\trequire(\r\n\t\t\tlength == _chapterNumber.length,\r\n\t\t\t\"Invalid array lengths - lengths did not match.\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tlength == _verseContent.length,\r\n\t\t\t\"Invalid array lengths - lengths did not match.\"\r\n\t\t);\r\n\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\t_storeVerse(_verseNumber[i], _chapterNumber[i], _verseContent[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction confirmVerse(\r\n\t\tbytes memory _verseId,\r\n\t\tuint256 _numericalId\r\n\t) external hasNotConfirmed(msg.sender, _numericalId) {\r\n\t\tconfirmations[msg.sender].push(_numericalId);\r\n\t\temit Confirmation(msg.sender, _verseId);\r\n\t}\r\n\r\n\tfunction _storeVerse(\r\n\t\tuint256 _verseNumber,\r\n\t\tuint256 _chapterNumber,\r\n\t\tstring memory _verseContent\r\n\t) private {\r\n\t\tnumberOfVerses++;\r\n\t\tVerseStr storage thisVerse = verses[numberOfVerses];\r\n\t\tthisVerse.verseId = numberOfVerses;\r\n\t\tthisVerse.verseNumber = _verseNumber;\r\n\t\tthisVerse.chapterNumber = _chapterNumber;\r\n\t\tthisVerse.verseContent = _verseContent;\r\n\r\n\t\temit Verse(\r\n\t\t\tmsg.sender,\r\n\t\t\tnumberOfVerses,\r\n\t\t\t_verseNumber,\r\n\t\t\t_chapterNumber,\r\n\t\t\t_verseContent\r\n\t\t);\r\n\t}\r\n}\r\n"
    },
    "contracts/Main.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract Main is Ownable, ReentrancyGuard {\r\n\tevent Donation(address donor, uint256 amount);\r\n\r\n\treceive() external payable {\r\n\t\tdonate();\r\n\t}\r\n\r\n\tfunction withdraw() external onlyOwner nonReentrant {\r\n\t\taddress contractOwner = owner();\r\n\t\trequire(address(this).balance > 0, \"There is nothing to withdraw.\");\r\n\t\t(bool success, ) = payable(contractOwner).call{\r\n\t\t\tvalue: address(this).balance\r\n\t\t}(\"\");\r\n\t\trequire(success, \"Failed to send Ether\");\r\n\t}\r\n\r\n\tfunction donate() public payable {\r\n\t\temit Donation(msg.sender, msg.value);\r\n\t}\r\n}\r\n"
    },
    "contracts/Mark.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"./BookManager.sol\";\r\n\r\ncontract Mark is Book {\r\n\tconstructor(address _contractOwner) {\r\n\t\t_transferOwnership(_contractOwner);\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}