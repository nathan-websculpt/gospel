{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/BookDeployer.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./BookManager.sol\";\r\n\r\n /*\r\n * @title BookDeployer\r\n * @author Nathan - 0x1e7aAbB9D0C701208E875131d0A1cFcDAba79350\r\n * @notice BookDeployer will allow for multiple books (BookManager contracts) to be deployed (via deployBook function)\r\n * @dev this code is considered to be at version 0.0.2; note that 0.0.1 is at Optimism address: 0x29BB1313321dbA27Ad074DD6AD2943040319B439\r\n * 0.0.1 was a single book (Gospel of John) stored onto Optimism; however, 0.0.2 will allow multiple books to be bound together.\r\n *\r\n * The intention of these smart contracts is to store/confirm (verse-by-verse) Biblical books (KJV) onto the blockchain.\r\n * I strongly suspect that I will upload the Gospels + Acts, gather more data from this process, and then begin on another version of these contracts.\r\n * Since I can not come back to update this later, I will say that as of the time of writing this,\r\n * I think it is important to protect the Gospels and the history of the early Church BEFORE the American election.\r\n * This is more important than waiting another 3 months for a \"perfect\" smart contract to be written (there is only one person working on this).\r\n *\r\n * If you are reading this from a future time: The year is 2024, and my world is in a fallen state.\r\n * This is not just a project that some developer used for a portfolio ... it is a move against a type of tyranny very few people from my time saw. \r\n *\r\n * Do I want to store the whole Bible? Yes (and the Greek/Hebrew, and multiple versions, etc). \r\n * I'm broke. I was fired after releasing the first Gospel.\r\n * I have, however, received $300 in donations. I am going to use that to store the Gospels + Acts. It should be enough (and allow for mistakes to occur). \r\n * My current thinking is that – before going for all the books and their versions – this code will go through at least 1 more update.\r\n * Meanwhile, I am also thinking that we need a whole new type of \"blockchain\" just for text.\r\n * \r\n * Pray that the world and the word remain together. Pray that the season be little.\r\n * \r\n *      from:\r\n *      Nathan\r\n *      https://github.com/nathan-websculpt\r\n *      0x1e7aAbB9D0C701208E875131d0A1cFcDAba79350\r\n *      October 24th, 2024 – 7:37 AM\r\n */\r\n \r\ncontract BookDeployer is Ownable {\r\n\tstruct Deployment {\r\n\t\taddress bookAddress;\r\n\t\tuint256 index;\r\n\t\tstring title;\r\n\t}\r\n\r\n\tstring public constant BIBLE_VERSION = \"KJV\";\r\n\tstring public constant BIBLE_VERSION_LONG = \"King James Version\";\r\n\tstring public constant CODE_VERSION = \"0.0.2\";\r\n\r\n\t/// @dev The list of deployed books; their finalization-status is stored in the BookManager contract\r\n\tDeployment[] public deployments;\r\n\r\n\tevent Book(\r\n\t\taddress indexed contractAddress,\r\n\t\tuint256 indexed index,\r\n\t\tstring title\r\n\t);\r\n\r\n\tconstructor(address contractOwner) {\r\n\t\t_transferOwnership(contractOwner);\r\n\t}\r\n\r\n\t/// @dev Allows owner to deploy a new book\r\n\t/// @param index The index of the book (to order-by)\r\n\t/// @param title The title of the book (to display)\r\n\tfunction deployBook(uint256 index, string memory title) external onlyOwner {\r\n\t\tBookManager b = new BookManager(index, title, msg.sender);\r\n\t\tdeployments.push(Deployment(address(b), index, title));\r\n\t\temit Book(address(b), index, title);\r\n\t}\r\n\r\n\tfunction getDeployments() external view returns (Deployment[] memory) {\r\n\t\tDeployment[] memory result = new Deployment[](deployments.length);\r\n\t\tfor (uint256 i = 0; i < deployments.length; i++) {\r\n\t\t\tresult[i] = deployments[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n"
    },
    "contracts/BookManager.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title BookManager\r\n * @author Nathan - 0x1e7aAbB9D0C701208E875131d0A1cFcDAba79350\r\n * @notice BookManager can represent a book of the Bible (KJV).\r\n * @dev This contract's deployer address is stored on variable: deployerAddress\r\n * BookManager will store/confirm (verse-by-verse) Bible verses (KJV) onto the blockchain.\r\n *\r\n */\r\n\r\ncontract BookManager is Ownable {\r\n\tstruct VerseStr {\r\n\t\tuint256 verseId;\r\n\t\tuint256 verseNumber;\r\n\t\tuint256 chapterNumber;\r\n\t\tstring verseContent;\r\n\t}\r\n\r\n\tmapping(uint256 => VerseStr) public verses;\r\n\tmapping(address => uint256[]) public confirmations;\r\n\tbool public hasBeenFinalized = false;\r\n\tuint256 public numberOfChapters = 0;\r\n\tuint256 public numberOfVerses = 0;\r\n\tuint256 public bookIndex;\r\n\taddress public deployerAddress;\r\n\tstring public bookTitle;\r\n\tstring public constant BIBLE_VERSION = \"KJV\";\r\n\tstring public constant BIBLE_VERSION_LONG = \"King James Version\";\r\n\tstring public constant CODE_VERSION = \"0.0.2\";\r\n\r\n\tevent Verse(\r\n\t\taddress indexed signer,\r\n\t\tbytes bookId,\r\n\t\tuint256 verseId,\r\n\t\tuint256 verseNumber,\r\n\t\tuint256 chapterNumber,\r\n\t\tstring verseContent\r\n\t);\r\n\r\n\tevent Confirmation(address indexed confirmedBy, bytes verseId);\r\n\r\n\tevent Finalization(address indexed finalizedBy, bytes bookId);\r\n\r\n\tmodifier hasNotConfirmed(address addr, uint256 verseId) {\r\n\t\tbool canContinue = true;\r\n\t\tfor (uint256 i = 0; i < confirmations[addr].length; i++) {\r\n\t\t\tif (confirmations[addr][i] == verseId) {\r\n\t\t\t\tcanContinue = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\trequire(canContinue, \"This address has already confirmed this verse.\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier notFinalized() {\r\n\t\trequire(!hasBeenFinalized, \"This contract has already been finalized.\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(uint256 index, string memory title, address contractOwner) {\r\n\t\t_transferOwnership(contractOwner);\r\n\t\tdeployerAddress = msg.sender;\r\n\t\tbookIndex = index;\r\n\t\tbookTitle = title;\r\n\t}\r\n\r\n\t/// @dev _bookId is the (bytes) id in the subgraph; function will check validity of starting verse/chapter numbers\r\n\t/// @notice Add a batch of verses to the book\r\n\tfunction addBatchVerses(\r\n\t\tbytes memory _bookId,\r\n\t\tuint256[] memory _verseNumber,\r\n\t\tuint256[] memory _chapterNumber,\r\n\t\tstring[] memory _verseContent\r\n\t) external notFinalized onlyOwner {\r\n\t\tuint256 length = _verseNumber.length;\r\n\t\trequire(\r\n\t\t\tlength == _chapterNumber.length,\r\n\t\t\t\"Invalid array lengths - lengths did not match.\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tlength == _verseContent.length,\r\n\t\t\t\"Invalid array lengths - lengths did not match.\"\r\n\t\t);\r\n\t\t// make sure a verse has been added before checking for skipped verses/chapters\r\n\t\tif (verses[1].verseNumber != 0) {\r\n\t\t\trequire(\r\n\t\t\t\tpreventSkippingVerse(_verseNumber[0], _chapterNumber[0]),\r\n\t\t\t\t\"The contract is preventing you from skipping a verse.\"\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tpreventSkippingChapter(_chapterNumber[0]),\r\n\t\t\t\t\"The contract is preventing you from skipping a chapter.\"\r\n\t\t\t);\r\n\t\t\trequire(\r\n\t\t\t\tenforceFirstVerseOfNewChapter(\r\n\t\t\t\t\t_verseNumber[0],\r\n\t\t\t\t\t_chapterNumber[0]\r\n\t\t\t\t),\r\n\t\t\t\t\"The contract is preventing you from starting a new chapter with a verse that is not 1.\"\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t// this is a first-verse scenario\r\n\t\t\trequire(\r\n\t\t\t\tenforceFirstVerse(_verseNumber[0], _chapterNumber[0]),\r\n\t\t\t\t\"The contract is preventing you from starting with a verse that is not 1:1\"\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tfor (uint256 i = 0; i < length; i++) {\r\n\t\t\t_storeVerse(\r\n\t\t\t\t_bookId,\r\n\t\t\t\t_verseNumber[i],\r\n\t\t\t\t_chapterNumber[i],\r\n\t\t\t\t_verseContent[i]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// if last chapter number (being added) is greater than current number of chapters, set the number of chapters\r\n\t\tif (_chapterNumber[length - 1] > numberOfChapters)\r\n\t\t\tnumberOfChapters = _chapterNumber[length - 1];\r\n\t}\r\n\r\n\t/// @dev Allows a user to confirm a verse\r\n\t/// @notice Once you have compared a verse against the original source, you can confirm it\r\n\tfunction confirmVerse(\r\n\t\tbytes memory _verseId,\r\n\t\tuint256 _numericalId\r\n\t) external hasNotConfirmed(msg.sender, _numericalId) {\r\n\t\tconfirmations[msg.sender].push(_numericalId);\r\n\t\temit Confirmation(msg.sender, _verseId);\r\n\t}\r\n\r\n\t/// Can't add verses after book is finalized\r\n\t/// @dev sets hasBeenFinalized to true; only needs the subgraph bookId to update on event\r\n\t/// @notice This function can't be un-done - verses can't be added once book is finalized\r\n\tfunction finalizeBook(\r\n\t\tbytes memory _bookId\r\n\t) external notFinalized onlyOwner {\r\n\t\thasBeenFinalized = true;\r\n\t\temit Finalization(msg.sender, _bookId);\r\n\t}\r\n\r\n\t/// @dev Just for the ability to easily retrieve the last-verse-added on front-end \r\n\t/// @notice Use this when uploading verses to easily know what the next verse number should be\r\n\tfunction getLastVerseAdded() external view returns (VerseStr memory) {\r\n\t\treturn verses[numberOfVerses];\r\n\t}\r\n\r\n\t/// @dev Retrieve verse by numerical id\r\n\t/// @notice Use this to bypass the subgraph and read the data directly from the blockchain\r\n\tfunction getVerseByNumber(\r\n\t\tuint256 _numericalId\r\n\t) external view returns (VerseStr memory) {\r\n\t\treturn verses[_numericalId];\r\n\t}\r\n\r\n\tfunction _storeVerse(\r\n\t\tbytes memory _bookId,\r\n\t\tuint256 _verseNumber,\r\n\t\tuint256 _chapterNumber,\r\n\t\tstring memory _verseContent\r\n\t) private {\r\n\t\tnumberOfVerses++;\r\n\t\tVerseStr storage thisVerse = verses[numberOfVerses];\r\n\t\tthisVerse.verseId = numberOfVerses;\r\n\t\tthisVerse.verseNumber = _verseNumber;\r\n\t\tthisVerse.chapterNumber = _chapterNumber;\r\n\t\tthisVerse.verseContent = _verseContent;\r\n\r\n\t\temit Verse(\r\n\t\t\tmsg.sender,\r\n\t\t\t_bookId,\r\n\t\t\tnumberOfVerses,\r\n\t\t\t_verseNumber,\r\n\t\t\t_chapterNumber,\r\n\t\t\t_verseContent\r\n\t\t);\r\n\t}\r\n\r\n\t// verse-skip prevention\r\n\t// to prevent skipping verses\r\n\t// prevents the situation of storing 1:1 and then storing 1:3\r\n\tfunction preventSkippingVerse(\r\n\t\tuint256 _verseNumber,\r\n\t\tuint256 _chapterNumber\r\n\t) private view returns (bool) {\r\n\t\tbool canContinue = true;\r\n\t\tVerseStr storage lastVerseAdded = verses[numberOfVerses];\r\n\r\n\t\tif (lastVerseAdded.chapterNumber == _chapterNumber) {\r\n\t\t\tif (_verseNumber != lastVerseAdded.verseNumber + 1) {\r\n\t\t\t\tcanContinue = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn canContinue;\r\n\t}\r\n\r\n\t// to prevent skipping chapters\r\n\t// prevents the situation of storing 1:1 and then storing 3:1\r\n\tfunction preventSkippingChapter(\r\n\t\tuint256 _chapterNumber\r\n\t) private view returns (bool) {\r\n\t\tbool canContinue = true;\r\n\t\tVerseStr storage lastVerseAdded = verses[numberOfVerses];\r\n\t\tif (\r\n\t\t\t_chapterNumber != lastVerseAdded.chapterNumber &&\r\n\t\t\t_chapterNumber != lastVerseAdded.chapterNumber + 1\r\n\t\t) {\r\n\t\t\tcanContinue = false;\r\n\t\t}\r\n\t\treturn canContinue;\r\n\t}\r\n\r\n\tfunction enforceFirstVerseOfNewChapter(\r\n\t\tuint256 _verseNumber,\r\n\t\tuint256 _chapterNumber\r\n\t) private view returns (bool) {\r\n\t\tbool canContinue = true;\r\n\t\tVerseStr storage lastVerseAdded = verses[numberOfVerses];\r\n\t\tif (\r\n\t\t\t_chapterNumber != lastVerseAdded.chapterNumber && _verseNumber != 1\r\n\t\t) {\r\n\t\t\tcanContinue = false;\r\n\t\t}\r\n\t\treturn canContinue;\r\n\t}\r\n\r\n\tfunction enforceFirstVerse(\r\n\t\tuint256 _verseNumber,\r\n\t\tuint256 _chapterNumber\r\n\t) private pure returns (bool) {\r\n\t\tbool canContinue = true;\r\n\t\tif (_chapterNumber != 1 || _verseNumber != 1) {\r\n\t\t\tcanContinue = false;\r\n\t\t}\r\n\t\treturn canContinue;\r\n\t}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}